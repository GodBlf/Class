package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

// 定义请求体结构
type MyRequest struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

// 定义响应体结构
type MyResponse struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
	Data any    `json:"data"`
}

func main() {
	// 1. 准备请求体
	reqBody := MyRequest{
		Name: "Gopher",
		Age:  5,
	}

	// 2. 序列化为 JSON
	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		panic(err)
	}

	// 3. 创建 HTTP 客户端（可设置超时）
	client := &http.Client{Timeout: 10 * time.Second}

	// 4. 构造请求
	req, err := http.NewRequest("POST", "http://localhost:8080/api/v1/test", bytes.NewBuffer(jsonData))
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", "application/json")

	// 5. 发送请求
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	// 6. 读取响应
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	// 7. 打印原始响应
	fmt.Println("Raw response:", string(respBody))

	// 8. 反序列化 JSON 响应
	var res MyResponse
	if err := json.Unmarshal(respBody, &res); err != nil {
		fmt.Println("Unmarshal error:", err)
		return
	}

	// 9. 打印解析结果
	fmt.Printf("Parsed struct: %+v\n", res)
}
