# initialize global
- 单例设计模式
## 初始化全局环境
- global包存项目运行的全局变量例如db数据库,redis,logger- 日志
- 用initialize包下的函数对全局变量进行初始化,启动项目前要初始化好全局环境,例如viper,logger等初始化
- 	//全局设置日志 直接zap.L()调用logger
	zap.ReplaceGlobals(logger)
这样就不用在global中单独设置logger了
- 单元测试时候因为开辟单独空间运行也要进行初始化

# 配置
- yaml配置文件要有对应的type 设置为global变量,在initialize中用viper去初始化

# unmarshal注意
反序列化 解码需要传入一个结构体,所以变量设置的时候不能只命名应该初始化一下
var (
	ServiceConfig = &config.ServiceConfig{}
	DB            *gorm.DB
	RedisDB       *redis.Client
)

# 客户端服务端json传输过程
json(type struct or map) ->marshal(序列化编码) ->[]byte->client/server->[]byte->unmarshal(反序列化解码)->json(type struct map or string)

框架一般把marshal一步省略

发送信息一般用json.map 接受一般接受到type &struct{}中

